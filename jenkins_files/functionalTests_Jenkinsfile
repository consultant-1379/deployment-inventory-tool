pipeline {
  agent {
    node {
      label 'stratus_slave'
    }
  }
  // The options directive is for configuration that applies to the whole job.
  options {
    buildDiscarder(logRotator(numToKeepStr:'30'))
    timeout(time: 40, unit: 'MINUTES')
    timestamps()
  }
  stages {
    stage('Clean') {
      steps {
        sh '''
        pid=$(sudo fuser -n tcp 80 2>&1 | awk '{print $2}'); [[ ! -z "$pid" ]] && (echo "Killing the previous running port 80 process."; sudo kill $pid) || echo "Port 80 is free to use."
        # Kill any running containers
        running=$(docker ps -a -q| wc -l)
        if [ "$running" -gt "0" ];then
           echo "Killing containers"
           docker rm -f $(docker ps -a -q)
           docker system prune -f
        fi
        if [ ! -f smokeAndUpgradeTests.sh ]; then
           exit 0;
        fi
        '''
      }
    }
    stage('Smoke Tests & Upgrade Tests') {
      steps {
        sh './smokeAndUpgradeTests.sh'
      }
    }
  }
  // The post build actions
  post {
    always {
      script {
        echo 'Allure Report'
        // archiveArtifacts artifacts: '**/SmokeTests/allure-results/**'
        // sh 'sudo chmod -R o+xw SmokeTests/allure-results'
        // allure([
        //   includeProperties: false,
        //   jdk: 'JDK1.8.0_77',
        //   properties: [],
        //   reportBuildPolicy: 'ALWAYS',
        //   results: [[path: 'SmokeTests/allure-results']]
        //  ])
      }
    }
    success {
      echo 'Pipeline Successfully Completed'
      sh "sudo rm -fr ${env.WORKSPACE}/*"
    }
    failure {
      emailext(attachLog: true,
               attachmentsPattern: 'currentBuild.rawBuild.log, SmokeTests/images/*.png',
               from: 'enmadm100@lmera.ericsson.se',
               to: "${env.GERRIT_EVENT_ACCOUNT_EMAIL}",
               subject: "Failed: Jenkins Job ${env.JOB_NAME}",
               body: "Job: ${env.JOB_NAME}\nBuild Number: ${env.BUILD_NUMBER}\nThe Job build URL: ${env.BUILD_URL}")
      sh "sudo rm -fr ${env.WORKSPACE}/*"
    }
  }
}
